/*
 * This file is generated by jOOQ.
 */
package app.cta4j.jooq.tables;


import app.cta4j.jooq.Keys;
import app.cta4j.jooq.Public;
import app.cta4j.jooq.tables.Direction.DirectionPath;
import app.cta4j.jooq.tables.RouteDirection.RouteDirectionPath;
import app.cta4j.jooq.tables.RouteStop.RouteStopPath;
import app.cta4j.jooq.tables.records.RouteRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Route extends TableImpl<RouteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.route</code>
     */
    public static final Route ROUTE = new Route();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouteRecord> getRecordType() {
        return RouteRecord.class;
    }

    /**
     * The column <code>public.route.id</code>.
     */
    public final TableField<RouteRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>public.route.name</code>.
     */
    public final TableField<RouteRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Route(Name alias, Table<RouteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Route(Name alias, Table<RouteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.route</code> table reference
     */
    public Route(String alias) {
        this(DSL.name(alias), ROUTE);
    }

    /**
     * Create an aliased <code>public.route</code> table reference
     */
    public Route(Name alias) {
        this(alias, ROUTE);
    }

    /**
     * Create a <code>public.route</code> table reference
     */
    public Route() {
        this(DSL.name("route"), null);
    }

    public <O extends Record> Route(Table<O> path, ForeignKey<O, RouteRecord> childPath, InverseForeignKey<O, RouteRecord> parentPath) {
        super(path, childPath, parentPath, ROUTE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RoutePath extends Route implements Path<RouteRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RoutePath(Table<O> path, ForeignKey<O, RouteRecord> childPath, InverseForeignKey<O, RouteRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RoutePath(Name alias, Table<RouteRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RoutePath as(String alias) {
            return new RoutePath(DSL.name(alias), this);
        }

        @Override
        public RoutePath as(Name alias) {
            return new RoutePath(alias, this);
        }

        @Override
        public RoutePath as(Table<?> alias) {
            return new RoutePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RouteRecord> getPrimaryKey() {
        return Keys.ROUTE_PKEY;
    }

    private transient RouteDirectionPath _routeDirection;

    /**
     * Get the implicit to-many join path to the
     * <code>public.route_direction</code> table
     */
    public RouteDirectionPath routeDirection() {
        if (_routeDirection == null)
            _routeDirection = new RouteDirectionPath(this, null, Keys.ROUTE_DIRECTION__ROUTE_DIRECTION_ROUTE_ID_FKEY.getInverseKey());

        return _routeDirection;
    }

    private transient RouteStopPath _routeStop;

    /**
     * Get the implicit to-many join path to the <code>public.route_stop</code>
     * table
     */
    public RouteStopPath routeStop() {
        if (_routeStop == null)
            _routeStop = new RouteStopPath(this, null, Keys.ROUTE_STOP__ROUTE_STOP_ROUTE_ID_FKEY.getInverseKey());

        return _routeStop;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.direction</code> table
     */
    public DirectionPath direction() {
        return routeDirection().direction();
    }

    @Override
    public Route as(String alias) {
        return new Route(DSL.name(alias), this);
    }

    @Override
    public Route as(Name alias) {
        return new Route(alias, this);
    }

    @Override
    public Route as(Table<?> alias) {
        return new Route(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(String name) {
        return new Route(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Name name) {
        return new Route(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Route rename(Table<?> name) {
        return new Route(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route where(Condition condition) {
        return new Route(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Route where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Route where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Route where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Route where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Route whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
